#!/bin/bash

function usage() {
    cat << EOF
usage: $0 <staging-config-file>.yaml [-h|--help] [-v|--verbose] [--deploy|--no-push] [--skip-fetch]

rebuild staging from yaml configuration

  For ICDS-Staging env = scripts/icds-staging.yaml
  For Staging env = scripts/staging.yaml

    -h --help       print this help text
    -v --verbose    display debugging output
    --deploy        deploy after rebuild is complete
    --no-push       do not push changes (cannot be used with --deploy)
    --skip-fetch    assume local copy is already update date with remote
    --enterprise    rebuild the enterprise branch
EOF
}

function abort () {
    echo $1
    echo "Aborting."
    exit 1
}

staging_file=$1
if [[ '' = $staging_file ]]
then
    abort "No config file specified."
fi
filename="scripts/$1"
shift
while [[ $# > 0 ]]
do
    key="$1"
    shift

    case $key in
      --deploy)
        deploy=y
        ;;
      -h|--help)
        usage
        exit
        ;;
      -v|--verbose)
        verbose=y
        ;;
      --skip-fetch)
        skip_fetch=y
        echo skip-fetch
        ;;
      --no-push)
        no_push=y
        echo no-push
        ;;
      --enterprise)
        enterprise=y
        echo enterprise
        ;;
      *)
        usage
        exit 1
        ;;
    esac
done

function rebuildstaging() {
    echo "rebuilding staging branch, this might take a while..."
    python scripts/rebuildstaging.py "$filename" "$@"
}

args=''

[[ $verbose = 'y' ]] && args="$args -v"
[[ $no_push = 'y' ]] && args="$args --no-push"

[[ $skip_fetch = 'y' ]] && args="$args sync rebuild"

# if staging file isn't up-to-date, warn and quit
git fetch origin master
if [[ -n $(git diff origin/master -- "$filename") && $no_push != 'y' ]]
then
    abort "$filename on this branch different from the one on master"
fi


rebuildstaging $args
if [[ $deploy = 'y' && $no_push != 'y' && $enterprise != 'y' ]]
then
    deploy_env=$(grep deploy_env $filename | sed -E 's/deploy_env:[[:space:]]+//')
    if [[ '' = $staging_file ]]
    then
        abort "Key 'deploy_env' not present in $filename."
    fi
    which commcare-cloud \
    && commcare-cloud $deploy_env deploy --quiet \
    || echo "Could not auto-deploy for you. Run `commcare-cloud $deploy_env deploy` to deploy."
fi
